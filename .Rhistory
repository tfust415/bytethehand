library(shiny); runApp('murdermap.R')
runApp('murdermap.R')
library(shiny); runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
library(shiny); runApp('murdermap.R')
runApp('murdermap.R')
library(shiny); runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
#Shared Tables to load - saving table in R format - will have to update with yearly additions
#base files to load
spss_supp_homi <- read.spss('C:/Users/Taylor/Documents/Murder Accountability/SHR76_19.sav', to.data.frame = TRUE) #reads SPSS file because there are columns not in the non-spss files
supp_homi <- read_csv('C:/Users/Taylor/Documents/Murder Accountability/Supplementary_Homicide_Report_MAP.csv') #reads in the "regular" supplementary homicide report
supp_homi_fips <- supp_homi %>%
left_join(select(spss_supp_homi, ID, 'county_fips'=CNTYFIPS), by='ID') #joining the FIPS code from the spss file - base table
#This is for the map
spss_supp_homi$CNTYFIPS <- gsub(" ", "", spss_supp_homi$CNTYFIPS, fixed = TRUE)   #subbing out space for fips codes for mapping
supp_homi_fips <- supp_homi %>%
left_join(select(spss_supp_homi, ID, 'county_fips'=CNTYFIPS), by='ID')
View(supp_homi_fips)
test <- supp_homi_fips%>%
filter(State=='Alaska')
View(test)
test <- supp_homi_fips%>%
filter(State=='Alaska')%>%
mutate(count=1)
test <- supp_homi_fips%>%
filter(State=='Alaska')%>%
mutate(count=1)%>%
filter(Weapon=='Explosives')
test <- supp_homi_fips%>%
filter(State=='Alaska')%>%
mutate(count=1)%>%
filter(Weapon=='Explosives')%>%
filter(Year>=2010)
View(test)
test <- supp_homi_fips%>%
filter(State=='Alaska')%>%
mutate(count=1)%>%
filter(Weapon=='Explosives')%>%
filter(Year>=2010)%>%
mutate(total=sum(count))
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
View(test)
test <- supp_homi_fips%>%
filter(State=='Alaska')%>%
mutate(count=1)%>%
filter(Weapon=='Explosives')%>%
filter(Year>=2010)
test <- supp_homi_fips%>%
filter(State=='Alaska')%>%
mutate(count=1)%>%
filter(Weapon=='Explosives')
View(test)
runApp('murdermap.R')
View(test)
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
test <- supp_homi_fips%>%
filter(State=='Alaska')%>%
mutate(count=1)%>%
filter(Weapon=='Explosives')%>%
filter(Year>=2010)%>%
mutate(total=sum(count))
table(test)
is.data.frame(test)
exists(test)
exists(test)
exists(test)
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
test[[1]]
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
test$Year
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
nrow(test)
runApp('murdermap.R')
supp_homi_fips <- read_rds('supp_homi_fips.rds')
all_counties <- read_rds('all_counties.rds')
state_fips <- read_rds('state_fips.rds')
all_counties <- counties(state = NULL, class="sf" , cb=TRUE, resolution="500k", year=NULL) #class can be SP or SF
#state fips list for filtering county maps - taken from census - joins for county map
state_fips <- read_tsv('./cen_fips.txt')
#base map
map <- leaflet() %>%
addProviderTiles(providers$OpenStreetMap)
#initial input values for years
yearmin <- min(supp_homi_fips$Year)
yearmax <- max(supp_homi_fips$Year)
#murder weapon list
weaplist <- select(supp_homi_fips, Weapon)%>%
unique()%>%
as.list
statelist <- select(state_fips, `State Name`=State_Name)%>%
unique()%>%
as.list
output$murdermap <- renderLeaflet({
leaflet()%>%
addTiles(providers$OpenStreetMap)
})
map_county_allyears <- reactive({
#filters based on no weapon filter and no state filter
if(input$solved==1 & input$weapfilter==2 & input$stfilter==2){
county_counts <- supp_homi_fips %>%
filter(Solved=="Yes")%>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS)#grouping by county fips instead of agency - since I will be mapping by county
}
if(input$solved==0 & input$weapfilter==2 & input$stfilter==2){
county_counts <- supp_homi_fips %>%
filter(Solved=="No")%>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS) #grouping by county fips instead of agency - since I will be mapping by county
}
if(input$solved==2 & input$weapfilter==2 & input$stfilter==2){
county_counts <- supp_homi_fips %>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS) #grouping by county fips instead of agency - since I will be mapping by county
}
#filters for weapon and no state filter
if(input$solved==1 & input$weapfilter==1 & input$stfilter==2){
county_counts <- supp_homi_fips %>%
filter(Solved=="Yes")%>%
filter(Weapon %in% input$weapon)%>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS) #grouping by county fips instead of agency - since I will be mapping by county
}
if(input$solved==0 & input$weapfilter==1 & input$stfilter==2){
county_counts <- supp_homi_fips %>%
filter(Solved=="No")%>%
filter(Weapon %in% input$weapon)%>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS) #grouping by county fips instead of agency - since I will be mapping by county
}
if(input$solved==2 & input$weapfilter==1 & input$stfilter==2){
county_counts <- supp_homi_fips %>%
filter(Weapon %in% input$weapon)%>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS) #grouping by county fips instead of agency - since I will be mapping by county
}
#filters based no weap filter and state filter
if(input$solved==1 & input$weapfilter==2 & input$stfilter==1){
county_counts <- supp_homi_fips %>%
filter(Solved=="Yes")%>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS)%>% #grouping by county fips instead of agency - since I will be mapping by county
filter(State %in% input$state)}
if(input$solved==0 & input$weapfilter==2 & input$stfilter==1){
county_counts <- supp_homi_fips %>%
filter(Solved=="No")%>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS)%>% #grouping by county fips instead of agency - since I will be mapping by county
filter(State %in% input$state)}
if(input$solved==2 & input$weapfilter==2 & input$stfilter==1){
county_counts <- supp_homi_fips %>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS)%>% #grouping by county fips instead of agency - since I will be mapping by county
filter(State %in% input$state)}
#filters for weapon and state filter
if(input$solved==1 & input$weapfilter==1 & input$stfilter==1){
county_counts <- supp_homi_fips %>%
filter(Solved=="Yes")%>%
filter(Weapon %in% input$weapon)%>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS)%>% #grouping by county fips instead of agency - since I will be mapping by county
filter(State %in% input$state)}
if(input$solved==0 & input$weapfilter==1 & input$stfilter==1){
county_counts <- supp_homi_fips %>%
filter(Solved=="No")%>%
filter(Weapon %in% input$weapon)%>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS)%>% #grouping by county fips instead of agency - since I will be mapping by county
filter(State %in% input$state)}
if(input$solved==2 & input$weapfilter==1 & input$stfilter==1){
county_counts <- supp_homi_fips %>%
filter(Weapon %in% input$weapon)%>%
filter(Year >= input$years[1] & Year <= input$years[2])%>%
mutate(count=1)%>%
group_by(CNTYFIPS)%>% #grouping by county fips instead of agency - since I will be mapping by county
filter(State %in% input$state)}
#Cannot sum when all observations have been filtered our in shiny - works fine just testing it otherwise
county_sums <- as.data.frame(county_counts) %>%
group_by(CNTYFIPS)%>%
mutate(`County Total`=case_when(nrow(county_counts)>=1 ~sum(count),
nrow(county_counts)<1~0))
all_counties %>% #all counties is from tigris is unsolved_run_code script
left_join(county_sums, by=c('GEOID'='county_fips'), how="left")%>%
left_join(state_fips, by=c('STATEFP'='st_fips'))%>% #state_fips is from the census in unsolved_run_code script
select(State_Name, CNTYFIPS, GEOID, `County Total`, geometry)%>%
unique()%>%
filter(`County Total` !=0)
})
runApp('murdermap.R')
#Shared Tables to load - saving table in R format - will have to update with yearly additions
#base files to load
spss_supp_homi <- read.spss('C:/Users/Taylor/Documents/Murder Accountability/SHR76_19.sav', to.data.frame = TRUE) #reads SPSS file because there are columns not in the non-spss files
supp_homi <- read_csv('C:/Users/Taylor/Documents/Murder Accountability/Supplementary_Homicide_Report_MAP.csv') #reads in the "regular" supplementary homicide report
supp_homi_fips <- supp_homi %>%
left_join(select(spss_supp_homi, ID, 'county_fips'=CNTYFIPS), by='ID') #joining the FIPS code from the spss file - base table
#This is for the map
spss_supp_homi$CNTYFIPS <- gsub(" ", "", spss_supp_homi$CNTYFIPS, fixed = TRUE)   #subbing out space for fips codes for mapping
supp_homi_fips <- supp_homi %>%
left_join(select(spss_supp_homi, ID, 'county_fips'=CNTYFIPS), by='ID')
test <- supp_homi_fips%>%
filter(State=='Alaska')%>%
mutate(count=1)%>%
filter(Weapon=='Explosives')%>%
filter(Year>=2010)%>%
mutate(total=sum(count))
nrow(test)
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
View(supp_homi)
test2 <- supp_homi_fips[1,1]
test2 <- supp_homi_fips[1,]
View(test2)
test2 <- supp_homi_fips[1,]%>%
mutate_all(is.na)
View(test2)
test2[1]
runApp('murdermap.R')
test2[1]
test2 <- supp_homi_fips[1,]%>%
mutate_all(0)
test2 <- supp_homi_fips[1,]%>%
mutate_all(NA)
test2 <- supp_homi_fips[1,]%>%
replace(is.na(.),0)
test2 <- as.data.frame(supp_homi_fips[1,])%>%
replace(is.na(.),0)
View(test2)
View(test2)
test2 <- as.data.frame(supp_homi_fips[1,])%>%
replace(is.na(),0)
test2 <- as.data.frame(supp_homi_fips[1,])
View(test2)
test2[1]
test2 <- supp_homi_fips[1,
]
test2 <- supp_homi_fips[1,]%>%
mutate(across(everything(), ~replace_na(.x,0)))
library(tidyr
)
test2 <- supp_homi_fips[1,]%>%
mutate(across(everything(), ~replace_na(.x,0)))
View(test2)
test2 <- supp_homi_fips[1,]%>%
mutate_all(funs(replace(.,is.na(.),0)))
View(test2)
View(test2)
test2 <- supp_homi_fips[1,]%>%
mutate_all(funs(replace(.,is.na(.),0)))
View(test2)
test2 <- supp_homi_fips[1,]%>%
mutate(across(everything(), ~replace_na(.,999)))
View(test2)
test2 <- supp_homi_fips[0,]
View(test2)
runApp('murdermap.R')
runApp('murdermap.R')
test2 <- supp_homi_fips[1,1]
test2 <- supp_homi_fips[1,]
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
library(shiny); runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
View(test2)
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
library(shiny); runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
library(shiny); runApp('murdermap.R')
supp_homi_fips <- read_rds('supp_homi_fips.rds')
View(supp_homi_fips)
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
library(shiny); runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
runApp('murdermap.R')
library(shiny); runApp('final_app_8_4_22.R')
runApp('final_app_8_4_22.R')
#Supplementary homicide report
spss_supp_homi <- read.spss('C:/Users/Taylor/Documents/Murder Accountability/SHR76_20.sav', to.data.frame = TRUE) #reads SPSS file because there are columns not in the non-spss files - UPDATED 8/4/2022
supp_homi <- read_csv('C:/Users/Taylor/Documents/Murder Accountability/SHR76_20.csv') #reads in the "regular" supplementary homicide report - UPDATED 8/4/2022
#This is for the map
spss_supp_homi$CNTYFIPS <- gsub(" ", "", spss_supp_homi$CNTYFIPS, fixed = TRUE)   #subbing out space for fips codes for mapping
supp_homi_fips <- supp_homi %>%
left_join(select(spss_supp_homi, ID, 'county_fips'=CNTYFIPS), by='ID')
saveRDS(supp_homi_fips, 'supp_homi_fips_20.rds')
runApp('final_app_8_4_22.R')
supp_homi_fips_19 <- read_rds("supp_homi_fips.rds")
View(supp_homi_fips)
View(supp_homi_fips_19)
all_counties <- read_rds('all_counties.rds')
View(all_counties)
state_fips <- read_rds('state_fips.rds')
View(state_fips)
supp_homi_fips_20 <- read_rds("supp_homi_fips_20.rds")
View(supp_homi_fips_20)
test <-     all_counties %>% #all counties is from tigris is unsolved_run_code script
left_join(supp_homi_fips_20, by=c('GEOID'='county_fips'), how="left")
test <-     all_counties %>% #all counties is from tigris is unsolved_run_code script
left_join(supp_homi_fips_20, by=c('GEOID'='county_fips'), how="left")
test <-     all_counties %>% #all counties is from tigris is unsolved_run_code script
left_join(supp_homi_fips_20, by=c('GEOID'='county_fips'), how="left")%>%
left_join(state_fips, by=c('STATEFP'='st_fips'))
test <-     all_counties %>% #all counties is from tigris is unsolved_run_code script
left_join(supp_homi_fips_20, by=c('GEOID'='county_fips'), how="left")%>%
left_join(state_fips, by=c('STATEFP'='st_fips'))%>%#state_fips is from the census in unsolved_run_code script
select(State_Name, CNTYFIPS, GEOID, `County Total`, geometry)%>%
unique()
test <-     all_counties %>% #all counties is from tigris is unsolved_run_code script
left_join(supp_homi_fips_20, by=c('GEOID'='county_fips'), how="left")%>%
left_join(state_fips, by=c('STATEFP'='st_fips'))%>%#state_fips is from the census in unsolved_run_code script
select(State_Name, CNTYFIPS, GEOID, geometry)%>%
unique()
View(test)
runApp('final_app_8_4_22.R')
runApp('final_app_8_4_22.R')
runApp('final_app_8_4_22.R')
runApp('final_app_8_4_22.R')
runApp('final_app_8_4_22.R')
runApp('final_app_8_4_22.R')
#supp_homi_fips_19 <- read_rds("supp_homi_fips.rds")
supp_homi_fips_20 <- read_rds("supp_homi_fips_20.rds")
View(supp_homi_fips_20)
names(supp_homi_fips_20)
#supp_homi_fips_19 <- read_rds("supp_homi_fips.rds")
supp_homi_fips_20 <- read_rds("supp_homi_fips_20.rds")%>%
select(ID, CNTYFIPS, State, Solved, Year, VicAge, VicSex, VicRace,OffAge, OffSex,OffRace,Weapon,county_fips)
runApp('final_app_8_4_22.R')
runApp('final_app_8_4_22.R')
runApp('final_app_8_4_22.R')
runApp('final_app_8_4_22.R')
runApp('final_app_8_4_22.R')
